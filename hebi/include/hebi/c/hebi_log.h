#pragma once

#include "hebi_group_feedback.h"
#include <stdint.h>

#ifdef __cplusplus /* Use C linkage when compiling this C library header from C++ */
extern "C" {
#endif

/**
 * \brief The C-style's API representation of a log file.
 *
 * Do not inherit from this; only obtain pointers through the API!
 *
 * Represents a log file generated by the API.
 *
 * @author Daniel Wright < daniel @ hebirobotics.com >
 * @since 24 Jul 2017
 */
typedef struct _HebiLogFile* HebiLogFilePtr;

/**
 * \brief Releases a log file instance
 */
void hebiLogFileRelease(HebiLogFilePtr ptr);

/**
 * \brief Retrieves the name and path of the log file.
 *
 * To only query the length of the string, provide a null pointer for the buffer parameter.
 * If the provided buffer is not large enough to hold the string (the length determined by the length parameter),
 * the call will fail. Note that the size of this buffer includes the null
 * terminating character.
 *
 * @param buffer buffer into which the string will be copied. This string will be null terminated.
 * @param length the length of the provided buffer. After calling this function, the value dereferenced will be
 * updated with the length of the string plus the null character.
 *
 * \returns HebiStatusSuccess on success, HebiStatusBufferTooSmall if the provided buffer is too small, or
 * HebiStatusInvalidArgument if the length parameter is null
 */
HebiStatusCode hebiLogFileGetFileName(HebiLogFilePtr ptr, char* buffer, size_t* length);

/**
 * \brief Opens an existing log file
 *
 * Note: It is up to the user to check if the returned pointer is null. If the file does not exist,
 * or if the file is not a valid log file, this function returns null.
 *
 * If this function returns a pointer, you must call @c hebiLogFileRelease(HebiLogFilePtr)
 * to release the allocated memory.
 *
 * @param file the directory and path of the file to open
 * @return a pointer to the file;  null if the file could not be opened
 */
HebiLogFilePtr hebiLogFileOpen(const char* file);

/**
 * \brief Retrieve the number of modules in the group represented by an opened log file
 *
 * @return The number of modules in the group
 */
int hebiLogFileGetNumberOfModules(HebiLogFilePtr ptr);

/**
 * \brief Retrieve the next group feedback from the opened log file
 *
 * @param feedback the feedback object into which the contents will be copied
 * @return HebiStatusSuccess on success, otherwise HebiStatusFailure
 */
HebiStatusCode hebiLogFileGetNextFeedback(HebiLogFilePtr ptr, HebiGroupFeedbackPtr feedback);

#ifdef __cplusplus /* End C linkage when compiling from C++ */
}
#endif
